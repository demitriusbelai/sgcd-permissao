/*
 *  Copyright (C) 2016 FAAC - Faculdade de Arquitetura, Artes e Comunicação
 *  UNESP - Universidade Estadual Paulista “Júlio de Mesquita Filho”
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package br.unesp.sgcd;

import br.unesp.sgcd.beans.Menu;
import br.unesp.sgcd.beans.Pagina;
import br.unesp.sgcd.beans.Permissao;
import br.unesp.sgcd.beans.PermissaoPagina;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author demitrius
 */
public class Permissoes extends javax.swing.JFrame {

    private TreeModel treeModel = new MenuTreeModel();
    private UserListModel listModel = new UserListModel();
    private UserListModel listModel2 = new UserListModel();

    private Service service = Service.getInstance();

    /**
     * Creates new form Permissoes
     */
    public Permissoes() {
        initComponents();
        jTree1.setCellRenderer(new MenuTreeCellRenderer());
        jList1.setCellRenderer(new UserListCellRenderer());
        jList2.setCellRenderer(new UserListCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        chkRecursivo = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        radioMenus = new javax.swing.JRadioButton();
        radioPaginas = new javax.swing.JRadioButton();
        radioAmbos = new javax.swing.JRadioButton();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        btnAlterar = new javax.swing.JButton();
        btnSalvar2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Permissões SGCD");

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setLastDividerLocation(180);

        jTree1.setModel(treeModel);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        chkRecursivo.setText("Recursivo");
        chkRecursivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRecursivoActionPerformed(evt);
            }
        });

        jList1.setModel(listModel);
        jScrollPane2.setViewportView(jList1);

        buttonGroup1.add(radioMenus);
        radioMenus.setSelected(true);
        radioMenus.setText("Menus");
        radioMenus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMenusActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioPaginas);
        radioPaginas.setText("Páginas");
        radioPaginas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPaginasActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioAmbos);
        radioAmbos.setText("Ambos");
        radioAmbos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAmbosActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        jLabel1.setText("Permissão");

        jList2.setModel(listModel2);
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList2);

        jLabel2.setText("Responsável");

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnSalvar2.setText("Salvar");
        btnSalvar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radioMenus)
                        .addGap(18, 18, 18)
                        .addComponent(radioPaginas)
                        .addGap(18, 18, 18)
                        .addComponent(radioAmbos)
                        .addGap(18, 18, 18)
                        .addComponent(chkRecursivo)
                        .addContainerGap(265, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalvar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioMenus)
                    .addComponent(radioPaginas)
                    .addComponent(radioAmbos)
                    .addComponent(chkRecursivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btnSalvar2))))
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        change();
    }//GEN-LAST:event_jTree1ValueChanged

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        for (int i : jList1.getSelectedIndices()) {
            if (listModel.getList().get(i).isNovo()) {
                listModel.getList().remove(i);
            } else {
                listModel.getList().get(i).setRemovido(true);
            }
            listModel.setList(listModel.getList());
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        AdicionarUsuario adicionarUsuario = new AdicionarUsuario(this, true);
        adicionarUsuario.setVisible(true);
        if (adicionarUsuario.isOk()) {
            for (UserListItem u : adicionarUsuario.getListaSelecionados()) {
                listModel.getList().add(u);
            }
            listModel.refresh();
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void radioAmbosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioAmbosActionPerformed
        change();
    }//GEN-LAST:event_radioAmbosActionPerformed

    private void radioPaginasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPaginasActionPerformed
        change();
    }//GEN-LAST:event_radioPaginasActionPerformed

    private void radioMenusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMenusActionPerformed
        change();
    }//GEN-LAST:event_radioMenusActionPerformed

    private void chkRecursivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRecursivoActionPerformed
        change();
    }//GEN-LAST:event_chkRecursivoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (jTree1.getSelectionPaths() == null) {
            return;
        }
        // Remover
        List<Permissao> listRemoverPermissao = new ArrayList<Permissao>();
        List<PermissaoPagina> listRemoverPermissaoPagina = new ArrayList<PermissaoPagina>();
        for (UserListItem userListItem : listModel.getList()) {
            if (userListItem.isRemovido()) {
                if (radioMenus.isSelected() || radioAmbos.isSelected()) {
                    listRemoverPermissao.addAll(userListItem.getListPermissao());
                }
                if (radioPaginas.isSelected() || radioAmbos.isSelected()) {
                    listRemoverPermissaoPagina.addAll(userListItem.getListPermissaoPagina());
                }
            }
        }
        // Adicionar
        Set<Permissao> setAdicionarPermissao = new HashSet<Permissao>();
        Set<PermissaoPagina> setAdicionarPermissaoPagina = new HashSet<PermissaoPagina>();
        for (UserListItem userListItem : listModel.getList()) {
            if (userListItem.isNovo()) {
                for (TreePath treePath : jTree1.getSelectionPaths()) {
                    Menu menu = (Menu) treePath.getLastPathComponent();
                    if (radioMenus.isSelected() || radioAmbos.isSelected()) {
                        Permissao p = new Permissao(menu.getCodigo(), userListItem.getUsuario().getLogin());
                        p.setUsuario(userListItem.getUsuario());
                        p.setAcesso("M");
                        p.setCriacao(new Date());
                        setAdicionarPermissao.add(p);
                    }
                    if ((radioPaginas.isSelected() || radioAmbos.isSelected()) && menu.getCodigoPagina() != null) {
                        PermissaoPagina p = new PermissaoPagina(menu.getCodigoPagina(), userListItem.getUsuario().getLogin());
                        p.setUsuario(userListItem.getUsuario());
                        p.setCriacao(new Date());
                        setAdicionarPermissaoPagina.add(p);
                    }
                    if (chkRecursivo.isSelected()) {
                        adicionarRecursivo(setAdicionarPermissao, setAdicionarPermissaoPagina, userListItem, menu);
                    }
                }
            }
        }
        boolean ret = service.persist(listRemoverPermissao, listRemoverPermissaoPagina, setAdicionarPermissao, setAdicionarPermissaoPagina);
        if (!ret) {
            JOptionPane.showMessageDialog(this, "Erro alterando permissões.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        change();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        int i = jList2.getSelectedIndex();
        if (i >= 0) {
            AdicionarUsuario adicionarUsuario = new AdicionarUsuario(this, true);
            adicionarUsuario.setVisible(true);
            if (adicionarUsuario.isOk() && adicionarUsuario.getListaSelecionados().size() > 0) {
                UserListItem u = adicionarUsuario.getListaSelecionados().get(0);
                listModel2.getList().get(i).setUsuario(u.getUsuario());
                listModel2.getList().get(i).setNovo(true);
                listModel2.refresh();
            }
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnSalvar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar2ActionPerformed
        List<Menu> listMenu = new ArrayList<Menu>();
        List<Pagina> listPagina = new ArrayList<Pagina>();
        for (UserListItem userListItem : listModel2.getList()) {
            if (userListItem.isNovo()) {
                if (radioMenus.isSelected() || radioAmbos.isSelected()) {
                    for (Menu menu : userListItem.getListMenu()) {
                        menu.setUsuarioResponsavel(userListItem.getUsuario().getLogin());
                    }
                    listMenu.addAll(userListItem.getListMenu());
                }
                if (radioPaginas.isSelected() || radioAmbos.isSelected()) {
                    for (Pagina pagina : userListItem.getListPagina()) {
                        pagina.setUsuarioResponsavel(userListItem.getUsuario().getLogin());
                    }
                    listPagina.addAll(userListItem.getListPagina());
                }
            }
        }
        boolean ret = service.persistResponsavel(listMenu, listPagina);
        if (!ret) {
            JOptionPane.showMessageDialog(this, "Erro alterando permissões.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        change();
    }//GEN-LAST:event_btnSalvar2ActionPerformed

    private void adicionarRecursivo(Set<Permissao> setAdicionarPermissao, Set<PermissaoPagina> setAdicionarPermissaoPagina,
            UserListItem u, Menu menu) {
        for (Menu m : menu.getChilds()) {
            if (radioMenus.isSelected() || radioAmbos.isSelected()) {
                Permissao p = new Permissao(m.getCodigo(), u.getUsuario().getLogin());
                p.setUsuario(u.getUsuario());
                p.setAcesso("M");
                p.setCriacao(new Date());
                setAdicionarPermissao.add(p);
            }
            if ((radioPaginas.isSelected() || radioAmbos.isSelected()) && m.getCodigoPagina() != null) {
                PermissaoPagina p = new PermissaoPagina(m.getCodigoPagina(), u.getUsuario().getLogin());
                p.setUsuario(u.getUsuario());
                p.setCriacao(new Date());
                setAdicionarPermissaoPagina.add(p);
            }
            adicionarRecursivo(setAdicionarPermissao, setAdicionarPermissaoPagina, u, m);
        }
    }

    private void change() {
        List<UserListItem> lista = new ArrayList<UserListItem>();
        List<UserListItem> lista2 = new ArrayList<UserListItem>();
        boolean primeiro = true;
        boolean primeiro2 = true;
        if (jTree1.getSelectionPaths() != null) {
            for (TreePath treePath : jTree1.getSelectionPaths()) {
                Menu menu = (Menu) treePath.getLastPathComponent();
                if (radioMenus.isSelected() || radioAmbos.isSelected()) {
                    //List<Permissao> listP = permissaoController.findPermissao(menu);
                    List<Permissao> listP = service.findPermissao(menu);
                    addUserListItem(menu, lista, listP, primeiro);
                    addUserListItem2(menu, lista2, primeiro2);
                    primeiro = false;
                    primeiro2 = false;
                }
                if (radioPaginas.isSelected() || radioAmbos.isSelected()) {
                    List<PermissaoPagina> listP = service.findPermissaoPagina(menu);
                    primeiro = addUserListItemPagina(menu, lista, listP, primeiro);
                    primeiro2 = addUserListItem2Pagina(menu, lista2, primeiro2);
                }
            }
        }
        Collections.sort(lista, new Comparator<UserListItem>() {
            @Override
            public int compare(UserListItem o1, UserListItem o2) {
                if (o1.getUsuario().getNome().compareTo(o2.getUsuario().getNome()) != 0) {
                    return o1.getUsuario().getNome().compareTo(o2.getUsuario().getNome());
                }
                return o1.getUsuario().getLogin().compareTo(o2.getUsuario().getLogin());
            }
        });
        listModel.setList(lista);
        Collections.sort(lista2, new Comparator<UserListItem>() {
            @Override
            public int compare(UserListItem o1, UserListItem o2) {
                if (o1.getUsuario().getNome().compareTo(o2.getUsuario().getNome()) != 0) {
                    return o1.getUsuario().getNome().compareTo(o2.getUsuario().getNome());
                }
                return o1.getUsuario().getLogin().compareTo(o2.getUsuario().getLogin());
            }
        });
        listModel2.setList(lista2);
    }

    private void addUserListItem(Menu menu, List<UserListItem> lista, List<Permissao> listP, boolean primeiro) {
        for (UserListItem userListItem : lista) {
            if (!userListItem.isTodos()) {
                continue;
            }
            boolean tem = false;
            for (Permissao p : listP) {
                if (p.getUsuario().equals(userListItem.getUsuario())) {
                    tem = true;
                    break;
                }
            }
            if (!tem) {
                userListItem.setTodos(false);
            }
        }
        for (Permissao p : listP) {
            boolean tem = false;
            for (UserListItem userListItem : lista) {
                if (userListItem.getUsuario().equals(p.getUsuario())) {
                    tem = true;
                    userListItem.getListPermissao().add(p);
                    break;
                }
            }
            if (!tem) {
                UserListItem userListItem = new UserListItem(p.getUsuario());
                userListItem.setTodos(primeiro);
                userListItem.getListPermissao().add(p);
                lista.add(userListItem);
            }
        }
        if (chkRecursivo.isSelected()) {
            for (Menu m : menu.getChilds()) {
                List<Permissao> listP2 = service.findPermissao(m);
                addUserListItem(m, lista, listP2, false);
            }
        }
    }

    private void addUserListItem2(Menu menu, List<UserListItem> lista, boolean primeiro) {
        boolean tem = false;
        for (UserListItem userListItem : lista) {
            if (menu.getUsuarioResponsavel() != null && !menu.getUsuarioResponsavel().equals(userListItem.getUsuario().getLogin())) {
                userListItem.setTodos(false);
            } else {
                tem = true;
                userListItem.getListMenu().add(menu);
            }
        }
        if (!tem) {
            UserListItem userListItem = new UserListItem(service.findUsuario(menu.getUsuarioResponsavel()));
            userListItem.setTodos(primeiro);
            userListItem.getListMenu().add(menu);
            lista.add(userListItem);
        }
        if (chkRecursivo.isSelected()) {
            for (Menu m : menu.getChilds()) {
                addUserListItem2(m, lista, false);
            }
        }
    }

    private boolean addUserListItemPagina(Menu menu, List<UserListItem> lista, List<PermissaoPagina> listP, boolean primeiro) {
        if (menu.getCodigoPagina() != null) {
            for (UserListItem userListItem : lista) {
                if (!userListItem.isTodos()) {
                    continue;
                }
                boolean tem = false;
                for (PermissaoPagina p : listP) {
                    if (p.getUsuario().equals(userListItem.getUsuario())) {
                        tem = true;
                        break;
                    }
                }
                if (!tem) {
                    userListItem.setTodos(false);
                }
            }
            for (PermissaoPagina p : listP) {
                boolean tem = false;
                for (UserListItem userListItem : lista) {
                    if (userListItem.getUsuario().equals(p.getUsuario())) {
                        tem = true;
                        userListItem.getListPermissaoPagina().add(p);
                        break;
                    }
                }
                if (!tem) {
                    UserListItem userListItem = new UserListItem(p.getUsuario());
                    userListItem.setTodos(primeiro);
                    userListItem.getListPermissaoPagina().add(p);
                    lista.add(userListItem);
                }
            }
            primeiro = false;
        }
        if (chkRecursivo.isSelected()) {
            for (Menu m : menu.getChilds()) {
                List<PermissaoPagina> listP2 = service.findPermissaoPagina(m);
                primeiro = addUserListItemPagina(m, lista, listP2, primeiro);
            }
        }
        return primeiro;
    }

    private boolean addUserListItem2Pagina(Menu menu, List<UserListItem> lista, boolean primeiro) {
        if (menu.getCodigoPagina() != null) {
            Pagina pagina = service.findPagina(menu);
            boolean tem = false;
            for (UserListItem userListItem : lista) {
                if (pagina.getUsuarioResponsavel() != null && !pagina.getUsuarioResponsavel().equals(userListItem.getUsuario().getLogin())) {
                    userListItem.setTodos(false);
                } else {
                    tem = true;
                    userListItem.getListPagina().add(pagina);
                }
            }
            if (!tem) {
                UserListItem userListItem = new UserListItem(service.findUsuario(pagina.getUsuarioResponsavel()));
                userListItem.setTodos(primeiro);
                userListItem.getListPagina().add(pagina);
                lista.add(userListItem);
            }
            primeiro = false;
        }
        if (chkRecursivo.isSelected()) {
            for (Menu m : menu.getChilds()) {
                List<PermissaoPagina> listP2 = service.findPermissaoPagina(m);
                primeiro = addUserListItem2Pagina(m, lista, primeiro);
            }
        }
        return primeiro;
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Permissoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Permissoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Permissoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Permissoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Permissoes().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvar2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkRecursivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JRadioButton radioAmbos;
    private javax.swing.JRadioButton radioMenus;
    private javax.swing.JRadioButton radioPaginas;
    // End of variables declaration//GEN-END:variables
}
